module RoundInternalSpec
    ( runTests
    ) where

import Test.Hspec
import Test.QuickCheck
import Control.Exception (evaluate)

import Globals (Key, Block)
import Round.Internal

block1 :: Block
block1 = [0x6B, 0xC1, 0xBE, 0xE2, 0x2E, 0x40, 0x9F, 0x96,
    0xE9, 0x3D, 0x7E, 0x11, 0x73, 0x93, 0x17, 0x2A]

key :: Key
key = [0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
    0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C]

initialKeyAddOutput1 :: Block
initialKeyAddOutput1 = [0x40, 0xBF, 0xAB, 0xF4, 0x06, 0xEE, 0x4D, 0x30,
    0x42, 0xCA, 0x6B, 0x99, 0x7A, 0x5C, 0x58, 0x16]

byteSubOutput1 :: Block
byteSubOutput1 = [0x09, 0x08, 0x62, 0xBF, 0x6F, 0x28, 0xE3, 0x04,
    0x2C, 0x74, 0x7F, 0xEE, 0xDA, 0x4A, 0x6A, 0x47]

shiftRowsOutput1 :: Block
shiftRowsOutput1 = [0x09, 0x28, 0x7F, 0x47, 0x6F, 0x74, 0x6A, 0xBF,
    0x2C, 0x4A, 0x62, 0x04, 0xDA, 0x08, 0xE3, 0xEE]

runTests :: IO ()
runTests = hspec $ do
    describe "Round.Internal Module" $ do
        describe "keyAdd" $ do
            it "ensures that the initial keyAdd functions correctly" $ do
                keyAdd key block1 `shouldBe` initialKeyAddOutput1
        describe "byteSub" $ do
            it "ensures that the byteSub SBox layer functions correctly" $ do
                byteSub initialKeyAddOutput1 `shouldBe` byteSubOutput1
        describe "byteSub" $ do
            it "ensures that the shiftRows layer functions correctly" $ do
                shiftRows byteSubOutput1 `shouldBe` shiftRowsOutput1
